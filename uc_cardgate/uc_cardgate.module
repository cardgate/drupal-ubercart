<?php

####################################################################
#                                                                   #
#	The property of CARDGATE www.cardgate.com                   	#
#                                                                   #
#   The merchant is entitled to change de CARDGATE plug-in code,    #
#	any changes will be at merchant's own risk.                 	#
#	Requesting CARDGATE support for a modified plug-in will be  	#
#	charged in accordance with the standard CARDGATE tariffs.   	#
#                                                                   #
####################################################################

/**
 * @file
 * Gateway integration for CardGate payment methods. 
 */
// Load CARDGATE API
require_once(drupal_get_path( 'module', 'uc_cardgate' ) . '/cardgate/cardgate.php');

// Load language file
require_once(drupal_get_path( 'module', 'uc_cardgate' ) . '/settings/language.php');

/**
 * Payment methods function names and info
 */
function uc_cardgate_getPaymentMethods() {
    $pm = array(
    	array( "id" => "cgp_cardgate", "name" => "CardGate", "descr" => "Pay using CardGate", "img" => "cardgate.png" ),
        array( "id" => "cgp_afterpay", "name" => "Afterpay", "descr" => "Pay using Afterpay", "img" => "afterpay.svg" ),
        array( "id" => "cgp_bancontact", "name" => "Bancontact", "descr" => "Pay using Bancontact", "img" => "bancontact.svg" ),
        array( "id" => "cgp_banktransfer", "name" => "Bank Transfer", "descr" => "Pay using Bank Transfer", "img" => "banktransfer.svg" ),
        array( "id" => "cgp_billink", "name" => "Billink", "descr" => "Pay using Billink", "img" => "billink.svg" ),
        array( "id" => "cgp_bitcoin", "name" => "Bitcoin", "descr" => "Pay using Bitcoin", "img" => "bitcoin.svg" ),
        array( "id" => "cgp_creditcard", "name" => "CreditCard", "descr" => "Pay using CreditCard", "img" => "creditcard.svg"),
        array( "id" => "cgp_directdebit", "name" => "Direct Debit", "descr" => "Pay using Direct Debit", "img" => "directdebit.svg" ),
        array( "id" => "cgp_directebanking", "name" => "SofortBanking", "descr" => "Pay using SofortBanking", "img" => "sofortbanking.svg" ),
        array( "id" => "cgp_giftcard", "name" => "Gift Card", "descr" => "Pay using Gift Card", "img" => "giftcard.svg" ),
        array( "id" => "cgp_ideal", "name" => "iDEAL", "descr" => "Pay using iDEAL", "img" => "ideal.svg" ),
        array( "id" => "cgp_idealqr", "name" => "iDEAL QR", "descr" => "Pay using iDEAL QR", "img" => "idealqr.svg" ),
        array( "id" => "cgp_klarna", "name" => "Klarna", "descr" => "Pay using Klarna", "img" => "klarna.svg" ),
        array( "id" => "cgp_mistercash", "name" => "MisterCash", "descr" => "Pay using MisterCash", "img" => "bancontact.svg" ),
	    array( "id" => "cgp_onlineueberweisen", "name" => "OnlineÜberweisen", "descr" => "Pay using OnlineÜberweisen", "img" => "onlineueberweisen.svg" ),
        array( "id" => "cgp_paypal", "name" => "PayPal", "descr" => "Pay using PayPal", "img" => "paypal.svg" ),
        array( "id" => "cgp_paysafecard", "name" => "Paysafecard", "descr" => "Pay using Paysafecard", "img" => "paysafecard.svg" ),
        array( "id" => "cgp_paysafecash", "name" => "Paysafecash", "descr" => "Pay using Paysafecash", "img" => "paysafecash.svg" ),
        array( "id" => "cgp_przelewy24", "name" => "Przelewy24", "descr" => "Pay using Przelewy24", "img" => "przelewy24.svg" ),
	    array( "id" => "cgp_spraypay", "name" => "SprayPay", "descr" => "Pay using SprayPay", "img" => "spraypay.svg" )
    );
    return $pm;
}

function uc_cardgate_getModuleFiles() {
    $files = array(
        "uc_cardgate.module",
        "uc_cardgate.install"
    );
    return $files;
}

/**
 * Implementation of hook_payment_method
 */
function uc_cardgate_uc_payment_method() {
    $i = -10;
    $checkoutview = variable_get('cardgate_checkoutview', 'text');
    
    foreach ( uc_cardgate_getPaymentMethods() as $key => $val ) {
        $val['id'] == 'cgp_cardgate' ? $callback = 'uc_payment_method_cardgate' : $callback = 'uc_payment_method_cardgate_sub';
	
    	switch ($checkoutview){
    		case 'logos':
    			$title = uc_cardgate_getImage($val['img']);
    		break;
    		case 'text':
    			$title = t( $val["name"] );
    		break;
    		case 'logosandtext':
    		 $title = uc_cardgate_getImage($val['img']) . variable_get( 'cardgate_' . $val["id"] . '_title', ' '.t( $val["name"] ) );
    		break;
    	}

        $methods[] = array(
            'id' => $val["id"],
            'name' => t( $val["name"] ),
            'title' => $title,
            'desc' => t( $val["descr"] ),
            'redirect' => 'uc_cardgate_form',
            'callback' => $callback,
            'weight' => $i,
            'checkout' => TRUE,
            'no_gateway' => TRUE
        );
        $i++;
    }
    return $methods;
}

/**
 * Implementation of hook_menu().
 */
function uc_cardgate_menu() {
    $items = array();
    $items['cart/cgp_success'] = array(
        'title' => 'Payment Success',
        'page callback' => 'uc_cardgate_success',
        'access arguments' => array( 'access content' ),
        'type' => MENU_CALLBACK,
    );
    $items['cart/cgp_failure'] = array(
        'title' => 'Payment Failure',
        'page callback' => 'uc_cardgate_failure',
        'access arguments' => array( 'access content' ),
        'type' => MENU_CALLBACK,
    );
    $items['cart/cgp_response'] = array(
        'title' => 'Payment response',
        'page callback' => 'uc_cardgate_response',
        'access arguments' => array( 'access content' ),
        'type' => MENU_CALLBACK,
    );
    $items['cart/cgp_test'] = array(
        'title' => 'CardGate test',
        'page callback' => 'uc_cardgate_test',
        'access arguments' => array( 'access content' ),
        'type' => MENU_CALLBACK,
    );

    return $items;
}

/**
 * Form to build the submission to cardgate.com.
 */
function uc_cardgate_form($form, &$form_state, $order) {

  $cgp = new CARDGATE( variable_get( 'cardgate_site_id', ''), variable_get( 'cardgate_prefix', '' ) );
  $data = $cgp->getOrderData( $order );
  $form['#action'] = $cgp->getNotifyUrl();

  foreach ($data as $name => $value) {
   $form[$name] = array('#type' => 'hidden', '#value' => $value);
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit order'),
  );
return $form;
}


/**
 * Controller
 */
function uc_payment_method_cardgate( $op, &$order, $form = NULL, &$form_state = NULL ) {
    global $base_url;
    switch ( $op ) {
        case 'cart-details':
            $details = "";
            $details.= variable_get( 'cardgate_cardgate_info', 'You will be redirected to the CARDGATE page to complete the payment' );
            if(!empty($details)){
                return array('#markup' => $details);
            }
            break;
        case "settings":
            return(uc_cardgate_settings_form());
            break;

    };
}

function uc_payment_method_cardgate_sub( $op, &$order, $form = NULL, &$form_state = NULL ) {
    global $base_url;
    switch ( $op ) {
        case 'cart-details':
            break;
        case "settings":
            return;
            break;
    };
}

/**
 * The settings form
 */
function uc_cardgate_settings_form() {

    global $base_url, $base_secure_url, $base_insecure_url;

    foreach ( uc_cardgate_get_supported_languages() as $val ) {
        $options['language'][$val["code"]] = $val["descr"];
    }

    $options['mode']['live'] = 'Live mode';
    $options['mode']['test'] = 'Test mode';

    $options['stream']["CURL"] = "CURL (recommended)";
    $options['stream']["FOPEN"] = "FOPEN (requires allow_url_fopen)";
    
    $options['checkoutview']['logos'] = "Logo's";
	$options['checkoutview']['text'] = 'Text';
    $options['checkoutview']['logosandtext'] = "Logo's and Text";

    $cgp = new CARDGATE( variable_get( 'cardgate_site_id', '' ), variable_get( 'cardgate_prefix', '' ) );

    $form['cardgate_module_info'] = array(
        '#type' => 'item',
        '#title' => 'CardGate Module information',
        '#description' => 'Version: ' . $cgp->version
    );

    $form['cardgate_mode'] = array(
        '#type' => 'select',
        '#title' => 'Mode',
        '#options' => $options['mode'],
        '#default_value' => variable_get( 'cardgate_mode', 'test' ),
        '#description' => t( 'Select for Test mode, or Live mode.' ),
    );

    $form['cardgate_site_id'] = array(
        '#type' => 'textfield',
        '#title' => 'Site ID',
        '#default_value' => variable_get( 'cardgate_site_id', '' ),
        '#description' => 'Enter the Site ID. You can find it in the CardGate backoffice.'
    );

    $form['cardgate_hash_key'] = array(
        '#type' => 'textfield',
        '#title' => 'Hash key',
        '#default_value' => variable_get( 'cardgate_hash_key', '' ),
        '#description' => 'Enter the Hash key. You can find it in the CardGate backoffice.'
    );

    $form['cardgate_language'] = array(
        '#type' => 'select',
        '#title' => 'Language',
        '#options' => $options['language'],
        '#default_value' => variable_get( 'cardgate_language', 'NL' ),
        '#description' => t( 'Select the language.' ),
    );
    
    $form['cardgate_cardgate_info'] = array(
        '#type' => 'textarea',
        '#title' => 'Payment method description',
        '#default_value' => variable_get( 'cardgate_cardgate_info', 'You will be redirected to the CardGate page to complete the payment.' ),
        '#description' => t( 'The description of the payment method displayed to customers in checkout.' ),
    );

    $form['cardgate_checkoutview'] = array(
    	'#type' => 'select',
        '#title' => 'Checkout View',
        '#options' => $options['checkoutview'],
        '#default_value' => variable_get( 'cardgate_checkoutview', 'text' ),
        '#description' => t( 'Select the Checkout view' ),
    );

    $form['cardgate_dologging'] = array(
        '#type' => 'checkbox',
        '#title' => 'Log to files',
        '#options' => 'Enable logging',
        '#default_value' => variable_get( 'cardgate_dologging', 'true' ),
        '#description' => t( 'It is recommended to always log the CardGate data. Currently the folder ' ) . ((uc_cardgate_canLog()) ? "is writable" : "is NOT writable!"),
    );
    return system_settings_form( $form );
}

/**
 * Implementation of hook_form_alter - needed to change the name of the Settings fieldset
 */
function uc_cardgate_form_alter( &$form, $form_state, $form_id ) {
    if ( $form_id == 'uc_payment_methods_form' ) {
        $form['method_cardgatecc']['#title'] = 'CardGate Settings';
    }
    if ( empty( $_POST ) && uc_cardgate_checkValue( "cardgate_site_id" ) === FALSE ) {
        drupal_set_message( t( 'CardGate site ID must be set to accept payments.' ), 'error' );
    }
    if ( empty( $_POST ) && uc_cardgate_checkValue( "cardgate_hash_key" ) === FALSE ) {
        drupal_set_message( t( 'CardGate hash Key must be set to accept payments.' ), 'error' );
    }
}

function uc_cardgate_checkValue( $var ) {
    $check = variable_get( $var, t( 'Not configured, see below.' ) );
    if ( !empty( $check ) && $check !== t( 'Not configured, see below.' ) ) {
        return TRUE;
    } else {
        return FALSE;
    }
}

function uc_cardgate_store_status() {
    if ( !variable_get( 'cardgate_site_id', '' ) ) {
        $statuses[] = array(
            'status' => 'error',
            'title' => t( 'CardGate site ID' ),
            'desc' => t( 'The CardGate site ID has to be set before any transactions can be made' ),
        );
    }
    if ( !variable_get( 'cardgate_prefix', '' ) ) {
        $statuses[] = array(
            'status' => 'error',
            'title' => t( 'CardGate Prefix' ),
            'desc' => t( 'The CardGate prefix has to be set before any transactions can be made' ),
        );
    }
    return $statuses;
}

/**
 * Forms for the select payment method
 */

/**
 * Functions
 */
function uc_cardgate_getImage($img) {
    global $base_url;
    if ( file_exists( drupal_get_path( 'module', 'uc_cardgate' ) . '/images/'.$img ) ) {
    	return '<img width="75px;" height="30px;" src="' . $base_url . '/' . drupal_get_path( 'module', 'uc_cardgate' ) . '/images/'.$img . '" border="0" >';
    } else
        return "";
}

function uc_cardgate_getLanguage( $mod = 'cardgate_language' ) {
    $lang = variable_get( $mod, 'NL' );
    if ( $lang == "MAIN" ) {
        $lang = variable_get( 'cardgate_language', 'NL' );
    }
    return $lang;
}

function uc_cardgate_get_transactionString( $data ) {
    if ( $data ) {
        $str = sprintf( " | Order ID: %s | Transaction ID: %s | Payment ID: %s | Payment method: %s", $data->orderID, $data->transactionID, $data->paymentID, $data->paymentMethod
        );
        return $str;
    }
    return "";
}

function uc_cardgate_canLog() {
    $filename = drupal_get_path( 'module', 'uc_cardgate' ) . "/logs";
    if ( is_writable( $filename ) ) {
        return true;
    } else {
        return false;
    }
    return false;
}

/**
 * Regional settings
 */
function uc_cardgate_get_supported_languages() {
    $cgp_language = array(
        array( 'code' => 'NL', 'descr' => 'Dutch' ),
        array( 'code' => 'EN', 'descr' => 'English' )
    );
    return $cgp_language;
}

/**
 * The return pages
 *
 */
function uc_cardgate_test() {
    return "CardGate module URL correct";
}

function uc_cardgate_success() {

    $cardgate = new CARDGATE( variable_get( 'cardgate_site_id', '' ), variable_get( 'cardgate_prefix', '' ) );
    $cardgate->SetLogging( (uc_cardgate_canLog() && variable_get( 'cardgate_dologging', '0' ) == 1) ? true : false  );
    $cardgate->SetLoggingDirectory( drupal_get_path( 'module', 'uc_cardgate' ) . "/logs" );

    $orderID = $_GET['extra'];

    if ( $orderID ) {
        $order = db_query( "SELECT * FROM {uc_orders} WHERE order_id = :order_id", array(':order_id'=> $orderID ))->fetchObject();
        if ( $order->order_status == 'payment_received' || $order->order_status == 'completed' ) {
            $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
            drupal_goto( 'cart/checkout/complete' );
        }
    }
}

function uc_cardgate_failure() {

    $cardgate = new CARDGATE( variable_get( 'cardgate_site_id', '' ), variable_get( 'cardgate_prefix', '' ) );
    $cardgate->SetLogging( (uc_cardgate_canLog() && variable_get( 'cardgate_dologging', '0' ) == 1) ? true : false  );
    $cardgate->SetLoggingDirectory( drupal_get_path( 'module', 'uc_cardgate' ) . "/logs" );
    $language = uc_cardgate_getLanguage();

    $orderID = $_GET['extra'];

    if ( $orderID ) {

        $order = db_query( "SELECT * FROM {uc_orders} WHERE order_id = :order_id", array(':order_id'=> $orderID ))->fetchObject();

// If the payment is cancellled, goto checkout again
        if ( $order->order_status == 'in_checkout' ) {
            drupal_goto( 'cart/checkout/' );
        }
        
        if ( $order->order_status == 'canceled' ) {
            uc_order_update_status($orderID, 'canceled');
// Display page
            watchdog( 'uc_cardgate', 'CardGate returned an error for this payment.', array(), WATCHDOG_ERROR, NULL );
            drupal_set_message( 'Transaction canceled or failed', 'error' );
            if ($language == 'NL'){
                $output= CARDGATE_LANG_NL_ERROR_PAGE;
            } else {
                $output= CARDGATE_LANG_EN_ERROR_PAGE;
            }
            return $output;
        }
        
        if ( $order->order_status == 'pending' ) {
            uc_order_update_status($orderID, 'pending');
// Display page
            watchdog( 'uc_cardgate', 'CardGate returned an error for this payment.', array(), WATCHDOG_ERROR, NULL );
            drupal_set_message( 'Transaction pending');
            if ($language == 'NL'){
                $output= CARDGATE_LANG_NL_PENDING_PAGE;
            } else {
                $output= CARDGATE_LANG_EN_PENDING_PAGE;
            }
            return $output;
        }
    }
}

function uc_cardgate_response() {
   
    $cardgate = new CARDGATE( variable_get( 'cardgate_site_id', '' ), variable_get( 'cardgate_prefix', '' ) );
    $cardgate->SetLogging( (uc_cardgate_canLog() && variable_get( 'cardgate_dologging', '0' ) == 1) ? true : false  );
    $cardgate->SetLoggingDirectory( drupal_get_path( 'module', 'uc_cardgate' ) . "/logs" );
    
    $transactionId = $_POST['transactionid'];
    $amount = $_POST['amount']/100;
    $currency = $_POST['currency'];
    $status = $_POST['status'];

    if ( $cardgate->VerifyPostback() ) {
       
        $orderID = $_POST['extra'];
        $order = uc_order_load( $orderID );
        $currentStatus = $order->order_status;
        switch ( $_POST['status'] ) {
            case 0:
                if (!($currentStatus == 'payment_received' || $currentStatus == 'processing' || $currentStatus == 'completed')) {
                    $statusMessage = 'Payment pending';
                    uc_order_update_status($orderID, 'pending');
                    $statusMessage = 'Payment pending';
                    uc_order_comment_save($orderID, 0, t("@statusMessage with Transaction ID @rid", array('@statusMessage' => $statusMessage, '@rid' => $transactionId)), 'order');
                }
               break;
            case 200:
                $comment = t('CardGate TransactionID: @txn_id', array('@txn_id' => $transactionId));
                uc_payment_enter( $orderID, $order->payment_method, $amount, $order->uid, NULL, $comment );
                uc_cart_complete_sale( $order );
                uc_order_comment_save($orderID, 0, t('Payment of @amount @currency submitted through CardGate with TransactionID @rid.', array('@amount' => $amount, '@currency' => $currency, '@rid' => $transactionId)), 'order', 'payment_received', true);
                $order = uc_order_load( $orderID );
                // force status if it was previousely canceled
                if ($order->order_status == 'canceled') {
                    uc_order_update_status($orderID, 'payment_received');
                }
                break;
            case 300:
                if (!($currentStatus == 'payment_received' || $currentStatus == 'processing' || $currentStatus == 'completed')) {
                    uc_order_update_status($orderID, 'canceled');
                    $statusMessage = 'Payment failed or canceled';
                    uc_order_comment_save($orderID, 0, t("@statusMessage with Transaction ID @rid", array('@statusMessage' => $statusMessage, '@rid' => $transactionId)), 'order');
                }
                break;
        }
// Add status
        exit( $_POST['transactionid'] . '.' . $_POST['status'] );
    } else {
        exit( 'Hash did not match.' );
    }
}